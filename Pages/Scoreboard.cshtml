@page
@using Scorekeeper.Models;
@model Scorekeeper.Pages.ScoreboardModel
@{
    ViewData["Title"] = "Scoreboard page";

    const int MAX_TEAMS_PER_ROW = 4;

    var scoreboard = Model.Scoreboard;
}

<div class="container-fluid text-center">
    <!-- Title and add button -->
    <div class="row">
        <div class="col-1"></div>
        <div class="col-2">
            @if (Model.CurrentUser.Id == scoreboard.OwnerId) // Only the owner can edit.
            {
                <button id="edit-scoreboard-btn" class="edit-hide">
                    <img src="~/img/edit.png" alt="edit" width="20px" height="20px"/>
                </button>
                <button id="edit-scoreboard-cancel-btn" class="edit-show btn-outline-danger btn">
                    <p>Cancel</p>
                </button>
                <button id="edit-scoreboard-save-btn" class="edit-show btn-primary btn">
                    <p>Save</p>
                </button>
            }
        </div>
        <div class="col-6 scoreboard-title-container">
            <h1 class="display-4 scoreboard-title-input edit-hide">@scoreboard?.Name</h1>
            <input class="display-4 scoreboard-title edit-show" value="@scoreboard?.Name"/>
        </div>
        <div class="col-2">
            @if (Model.CurrentUser.Id == scoreboard.OwnerId) // Only the owner can add a new team.
            {
                <button id="add-team-btn">
                    <p>+</p>
                </button>
            }
        </div>
        <div class="col-1"></div>
    </div>

    <!-- CREATE TEAM FORM -->
    <div class="form-container text-center" id="create-form">
        <form method="post" class="form-popup">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <!-- NAME -->
            <div class="form-group">
                <label asp-for="NewName" class="control-label">Team Name</label>
                <input asp-for="NewName" class="form-control" />
                <span asp-validation-for="NewName" class="text-danger"></span>
            </div>
            <br>
            <!-- COLOR -->
            <div class="form-group">
                <p>Team Color</p>
                @foreach (string color in Enum.GetNames(typeof(Team.ColorName)))
                {
                    <input type="radio" class="color-radio" id="@color" value="@color" asp-for="NewColor" style="--color-var:@Team.TeamColorLookup[new Team.TeamColorInfo(Enum.Parse<Team.ColorName>(color), Team.ColorMode.Light)];"/>
                } 
            </div>
            <br>
            <!-- Submit/Cancel Buttons -->
            <div class="form-group">
                <input type="submit" value="Create" asp-page-handler="Create" asp-route-scoreboardid="@scoreboard.Id" class="btn btn-primary" />
                <input type="button" value="Cancel" class="btn btn-outline-danger" id="add-team-cancel-btn" />
            </div>
        </form>
    </div>

    <!-- Team list -->
    @for (int i = 0; i < Model.Scoreboard?.Teams.Count; i++)
    {
        // Open a new row if we're at the start of the row
        if (i % MAX_TEAMS_PER_ROW == 0)
        {
            @:<div class="row justify-content-center">
        }

        var team = scoreboard?.Teams.ToList()[i];
        <div class="col-3">
            <div class="container-fluid team-score-container">
                <div class="row">
                    <div class="col display-4 team-name-container edit-hide">
                        <p>@team?.Name</p>
                    </div>
                    <div class="col edit-show edit-scoreboard-header">
                        <input class="display-4 edit-show edit-team-name" value="@team?.Name" style="width:80%;"/>
                        <button class="btn btn-danger delete-team-btn">
                            <p>X</p>
                        </button>
                    </div>
                    
                </div>
            </div>
            <div class="container-fluid team-score-container" style="background-color:@Team.TeamColorLookup[new Team.TeamColorInfo((Team.ColorName)team?.Color, Team.ColorMode.Light)]; color:@(team.Color == (int)Team.ColorName.Black ? Html.Raw("#FFFFFF") : Html.Raw("#000000"));">
                <div class="row">
                    <div class="col-12">
                        @team?.Score
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        <form method="post" asp-page-handler="DecrementScore" asp-route-teamid="@team?.Id" asp-route-scoreboardid="@scoreboard?.Id">
                        <button class="minus-btn" style="color:@(team?.Color == (int)Team.ColorName.Black ? Html.Raw("#FFFFFF") : Html.Raw("#969696"));">
                            <p>-</p>
                        </button>
                        </form>
                    </div>
                    <div class="col-6">
                        <form method="post" asp-page-handler="IncrementScore" asp-route-teamid="@team?.Id" asp-route-scoreboardid="@scoreboard?.Id">
                        <button class="plus-btn" style="color:@(team?.Color == (int)Team.ColorName.Black ? Html.Raw("#FFFFFF") : Html.Raw("#969696"));">
                            <p>+</p>
                        </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        // Close the row if we're at the end of the row or the end of the list
        if (i % MAX_TEAMS_PER_ROW == MAX_TEAMS_PER_ROW - 1 || i == Model.Scoreboard.Teams.Count - 1)
        {
            @:</div>
        }
    }
</div>